{
	"info": {
		"_postman_id": "10dd13bd-81f4-4eda-945f-a35e4aba241d",
		"name": "StudentAPIs Validations",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29437836"
	},
	"item": [
		{
			"name": "Get Single Student",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", ()=>{\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Successful GET request\", ()=>{\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-type header is present or not\", () =>{\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-type header is application/json\",()=>{\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"});\r",
							"\r",
							"//we can also add validations for cookies if response req having some cookies\r",
							"\r",
							"pm.test(\"Response time is less than 100ms\", ()=>{\r",
							"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
							"});\r",
							"\r",
							"\r",
							"//Validations for data type of response data\r",
							"const jsonData=pm.response.json();\r",
							"pm.test(\"Test Data Type of the response\", ()=>{\r",
							"   pm.expect(jsonData).to.be.an(\"object\");  \r",
							"   pm.expect(jsonData.name).to.be.a(\"string\");\r",
							"   pm.expect(jsonData.id).to.be.a(\"string\");\r",
							"   pm.expect(jsonData.courses).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"//Validations for data of response\r",
							"pm.test(\"Test Data of the response\", ()=>{\r",
							"   pm.expect(jsonData.id).to.eql(\"1\");  \r",
							"   pm.expect(jsonData.name).to.eql(\"John\");\r",
							"   pm.expect(jsonData.location).to.eql(\"US\");\r",
							"   pm.expect(jsonData.phone).to.eql(\"1234567890\");\r",
							"   pm.expect(jsonData.courses[0]).to.eql(\"Java\");\r",
							"    pm.expect(jsonData.courses[1]).to.eql(\"Selenium\");\r",
							"});\r",
							"\r",
							"//validating JSON Schema\r",
							"var schema={\r",
							"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"    \"type\":\"object\",\r",
							"    \"properties\":{\r",
							"        \"id\":{\r",
							"            \"type\":\"string\"\r",
							"        },\r",
							"        \"name\":{\r",
							"            \"type\":\"string\"\r",
							"        },\r",
							"         \"location\":{\r",
							"            \"type\":\"string\"\r",
							"        },\r",
							"         \"phone\":{\r",
							"            \"type\":\"string\"\r",
							"        },\r",
							"         \"courses\":{\r",
							"            \"type\":\"array\",\r",
							"            \"items\":[\r",
							"                {\r",
							"                    \"type\":\"string\"\r",
							"                },\r",
							"                {\r",
							"                    \"type\":\"string\"\r",
							"                }\r",
							"            ]\r",
							"        }\r",
							"    },\r",
							"    \"required\":[\r",
							"        \"id\",\r",
							"        \"name\",\r",
							"        \"location\",\r",
							"        \"phone\",\r",
							"        \"courses\"\r",
							"    ]\r",
							"    \r",
							"    }\r",
							"\r",
							"    pm.test(\"Schema is Valid\", ()=>{\r",
							"        pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
							"    });"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/students/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"students",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Student Data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", ()=>{\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Successful GET request\", ()=>{\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-type header is present or not\", () =>{\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-type header is application/json\",()=>{\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/students",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"students"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create New Student",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", ()=>{\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Successful GET request\", ()=>{\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-type header is present or not\", () =>{\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-type header is application/json\",()=>{\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": " {\r\n        \"name\": \"Scott\",\r\n        \"location\": \"France\",\r\n        \"phone\": \"657658798970\",\r\n        \"courses\": [\r\n            \"JavaScript\",\r\n            \"Playwright\"\r\n        ]\r\n }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/students",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"students"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Student",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", ()=>{\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Successful GET request\", ()=>{\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-type header is present or not\", () =>{\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-type header is application/json\",()=>{\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": " {\r\n        \"name\": \"Scott\",\r\n        \"location\": \"Germany\",\r\n        \"phone\": \"657658798970\",\r\n        \"courses\": [\r\n            \"JavaScript\",\r\n            \"Cypress\"\r\n        ]\r\n }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/students/6cf9",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"students",
						"6cf9"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Student",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", ()=>{\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Successful GET request\", ()=>{\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-type header is present or not\", () =>{\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-type header is application/json\",()=>{\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/students/6cf9",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"students",
						"6cf9"
					]
				}
			},
			"response": []
		}
	]
}